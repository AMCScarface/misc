#! /usr/bin/env stap
/*
* Print out the amount of time spent in the read and write systemcall
* when each file opened by the process is closed. Note that the systemtap
* script needs to be running before the open operations occur for
* the script to record data.
*
* This script could be used to to find out which files are slow to load
* on a machine. e.g.
*
* stap iotime.stp -c 'firefox'
*
* Output format is:
* timestamp pid (executabable) info_type path ...
*
* 200283135 2573 (cupsd) access /etc/printcap read: 0 write: 7063
* 200283143 2573 (cupsd) iotime /etc/printcap time: 69
*
*/
global start
global time_io
function timestamp:long() { return gettimeofday_us() - start }
function proc:string() { return sprintf("%d (%s)", pid(), execname()) }
probe begin { start = gettimeofday_us() }

global filehandles, fileread, filewrite

probe syscall.open.return {
	filename = user_string($filename)
	if ($return != -1) {
		filehandles[pid(), $return] = filename
	} else {
		printf("%d %s access %s fail\n", timestamp(), proc(), filename)
	}
}

probe syscall.read.return {
	p = pid()
	fd = $fd
	bytes = $return
	time = gettimeofday_us() - @entry(gettimeofday_us())
	if (bytes > 0)
	fileread[p, fd] += bytes
	time_io[p, fd] <<< time
}

probe syscall.write.return {
	p = pid()
	fd = $fd
	bytes = $return
	time = gettimeofday_us() - @entry(gettimeofday_us())
	if (bytes > 0)
	filewrite[p, fd] += bytes
	time_io[p, fd] <<< time
}

probe syscall.close {
	if ([pid(), $fd] in filehandles) {
		printf("%d %s access %s read: %d write: %d\n",
		timestamp(), proc(), filehandles[pid(), $fd],
		fileread[pid(), $fd], filewrite[pid(), $fd])
		if (@count(time_io[pid(), $fd]))
		printf("%d %s iotime %s time: %d\n", timestamp(), proc(),
		filehandles[pid(), $fd], @sum(time_io[pid(), $fd]))
	}

	delete fileread[pid(), $fd]
	delete filewrite[pid(), $fd]
	delete filehandles[pid(), $fd]
	delete time_io[pid(),$fd]
}


